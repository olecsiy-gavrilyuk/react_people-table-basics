{"version":3,"sources":["components/NavLinkItem.tsx","components/NavBar.tsx","components/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PeopleLink.tsx","components/PeopleInfo.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","components/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["NavLinkItem","to","title","className","isActive","classNames","NavBar","role","HomePage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PeopleLink","person","name","sex","slug","PeopleInfo","selectedPersonSlug","born","died","fatherName","motherName","father","mother","PeopleTable","people","useParams","map","findPerson","find","undefined","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasLoadingError","setHasLoadingError","hasNoDataError","setHasNoDataError","getPeopleFromServer","fetchedPeople","isEmptyResponse","length","currentPerson","useEffect","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.819d19ad.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport { FC } from 'react';\nimport classNames from 'classnames';\n\ninterface Props {\n  to: string;\n  title: string;\n}\n\nexport const NavLinkItem: FC<Props> = ({\n  to,\n  title,\n}) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames(\n      'navbar-item',\n      {\n        'has-background-grey-lighter': isActive,\n      },\n    )}\n  >\n    {title}\n  </NavLink>\n);\n","import { NavLinkItem } from './NavLinkItem';\n\nexport const NavBar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLinkItem title=\"Home\" to=\"/\" />\n        <NavLinkItem title=\"People\" to=\"people\" />\n      </div>\n    </div>\n  </nav>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ninterface Props {\n  person: Person;\n}\n\nexport const PeopleLink: FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    slug,\n  } = person;\n\n  return (\n    <Link\n      to={`../${slug}`}\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { PeopleLink } from './PeopleLink';\nimport { Person } from '../types';\n\ninterface Props {\n  person: Person;\n  selectedPersonSlug: string;\n}\n\nexport const PeopleInfo: FC<Props> = ({\n  person,\n  selectedPersonSlug,\n}) => {\n  const {\n    sex,\n    born,\n    slug,\n    died,\n    fatherName,\n    motherName,\n    father,\n    mother,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      key={slug}\n      className={classNames({\n        'has-background-warning': slug === selectedPersonSlug,\n      })}\n    >\n      <td>\n        <PeopleLink person={person} />\n      </td>\n      <td>\n        {sex}\n      </td>\n      <td>\n        {born}\n      </td>\n      <td>\n        {died}\n      </td>\n      <td>\n        {mother ? (\n          <PeopleLink person={mother} />\n        ) : (\n          motherName || '-'\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PeopleLink person={father} />\n        ) : (\n          fatherName || '-'\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PeopleInfo } from './PeopleInfo';\n\ninterface Props {\n  people: Person[];\n}\n\nexport const PeopleTable: FC<Props> = ({ people }) => {\n  const { slug: selectedPersonSlug = '' } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            Name\n          </th>\n          <th>\n            Sex\n          </th>\n          <th>\n            Born\n          </th>\n          <th>\n            Died\n          </th>\n          <th>\n            Mother\n          </th>\n          <th>\n            Father\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => (\n          <PeopleInfo\n            key={person.slug}\n            person={person}\n            selectedPersonSlug={selectedPersonSlug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\n\nconst findPerson = (people: Person[], name: string) => {\n  return people.find((person) => person.name === name) || undefined;\n};\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n  const [hasNoDataError, setHasNoDataError] = useState(false);\n\n  const getPeopleFromServer = async () => {\n    try {\n      setIsLoading(true);\n      const fetchedPeople = await getPeople();\n      const isEmptyResponse = fetchedPeople.length === 0;\n\n      if (isEmptyResponse !== hasNoDataError) {\n        setHasNoDataError(isEmptyResponse);\n      }\n\n      setPeople(fetchedPeople.map((person) => {\n        const currentPerson = { ...person };\n        const { fatherName, motherName } = person;\n\n        if (motherName) {\n          currentPerson.mother = findPerson(fetchedPeople, motherName);\n        }\n\n        if (fatherName) {\n          currentPerson.father = findPerson(fetchedPeople, fatherName);\n        }\n\n        return currentPerson;\n      }));\n    } catch {\n      setHasLoadingError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getPeopleFromServer();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">\n        People Page\n      </h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {hasLoadingError && (\n            <p\n              data-cy=\"peopleLoadingError\"\n              className=\"has-text-danger\"\n            >\n              Something went wrong\n            </p>\n          )}\n\n          {hasNoDataError && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {isLoading && (\n            <Loader />\n          )}\n\n          {!hasLoadingError && !hasNoDataError && !isLoading && (\n            <PeopleTable people={people} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">\n        Page not found\n      </h1>\n    </div>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}